{"version":3,"sources":["logo.svg","serviceWorker.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","TodoApp","props","state","items","text","handleChange","bind","handleSubmit","event","this","setState","target","value","preventDefault","length","newItem","id","Date","now","concat","className","TodoNav","src","logo","alt","Form","onSubmit","FormGroup","Label","for","Input","type","onChange","Button","color","React","version","Component","TodoList","map","item","key","useState","isOpen","setIsOpen","Navbar","dark","fixed","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","NavbarText","AppRouter","path","component","exact","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,gKCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6MCCAC,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,GACPC,KAAM,IAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAPL,E,yDAUNE,GACTC,KAAKC,SAAS,CACVN,KAAMI,EAAMG,OAAOC,U,mCAIdJ,GAET,GADAA,EAAMK,iBACyB,IAA3BJ,KAAKP,MAAME,KAAKU,OAApB,CAGA,IAAMC,EAAU,CACZX,KAAMK,KAAKP,MAAME,KACjBY,GAAIC,KAAKC,OAEbT,KAAKC,UAAS,SAAAR,GAAK,MAAK,CACpBC,MAAOD,EAAMC,MAAMgB,OAAOJ,GAC1BX,KAAM,U,+BAKV,OACI,yBAAKgB,UAAU,OACX,kBAACC,EAAD,MACA,4BAAQD,UAAU,cACd,6BAASA,UAAU,QACf,yBAAKE,IAAKC,IAAMH,UAAU,WAAWI,IAAI,UAE7C,6BAASJ,UAAU,QACf,wCACA,kBAACK,EAAA,EAAD,CAAMC,SAAUjB,KAAKF,cACjB,kBAACoB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,YAAX,gCAGA,kBAACC,EAAA,EAAD,CACId,GAAG,WACHe,KAAK,OACLC,SAAUvB,KAAKJ,aACfO,MAAOH,KAAKP,MAAME,QAG1B,kBAAC6B,EAAA,EAAD,CAAQC,MAAM,QAAd,QACUzB,KAAKP,MAAMC,MAAMW,OAAS,KAI5C,6BAASM,UAAU,cACf,kBAAC,EAAD,CAAUjB,MAAOM,KAAKP,MAAMC,SAEhC,6BAASiB,UAAU,iBACf,uBAAGA,UAAU,oBAAb,sBAAoDe,IAAMC,gB,GA/D5DC,aAuEhBC,E,uKAEE,OACI,4BACK7B,KAAKR,MAAME,MAAMoC,KAAI,SAAAC,GAAI,OACtB,wBAAIC,IAAKD,EAAKxB,IAAKwB,EAAKpC,c,GALrBiC,aAYvB,SAAShB,IAAW,IAAD,EACaqB,oBAAS,GADtB,mBACRC,EADQ,KACAC,EADA,KAGf,OACI,kBAACC,EAAA,EAAD,CAAQX,MAAM,OAAOY,MAAI,EAACC,MAAM,MAAMC,OAAO,MACzC,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,sBACA,kBAACC,EAAA,EAAD,CAAeC,QAJR,kBAAMR,GAAWD,MAKxB,kBAACU,EAAA,EAAD,CAAUV,OAAQA,EAAQW,QAAM,GAC5B,kBAACC,EAAA,EAAD,CAAKnC,UAAU,UAAUkC,QAAM,GAC3B,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASP,KAAK,uCAAd,YAGR,kBAACQ,EAAA,EAAD,2BAAgCvB,IAAMC,W,IAkBvCuB,E,uKAVP,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAW7D,EAAS8D,OAAK,U,GALrCzB,aClHxB0B,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAeC,SAAUC,YACrB,kBAAC,EAAD,QAGRC,SAASC,eAAe,SFsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.49eb400a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n    Button,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Navbar,\n    NavbarBrand,\n    NavbarToggler,\n    Collapse,\n    Nav,\n    NavItem, NavLink, NavbarText\n} from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Route, Switch} from \"react-router-dom\";\n\nclass TodoApp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            text: '',\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event){\n        this.setState({\n            text: event.target.value\n        });\n    }\n\n    handleSubmit(event){\n        event.preventDefault();\n        if (this.state.text.length === 0){\n            return;\n        }\n        const newItem = {\n            text: this.state.text,\n            id: Date.now()\n        };\n        this.setState(state => ({\n            items: state.items.concat(newItem),\n            text: ''\n        }));\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <TodoNav/>\n                <header className=\"App-header\">\n                    <section className=\"logo\">\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    </section>\n                    <section className=\"todo\">\n                        <h3>TODO App</h3>\n                        <Form onSubmit={this.handleSubmit}>\n                            <FormGroup>\n                                <Label for=\"new-todo\">\n                                    Ayo tulis sesuatu disini ...\n                                </Label>\n                                <Input\n                                    id=\"new-todo\"\n                                    type=\"text\"\n                                    onChange={this.handleChange}\n                                    value={this.state.text}\n                                />\n                            </FormGroup>\n                            <Button color=\"info\">\n                                Add #{this.state.items.length + 1}\n                            </Button>\n                        </Form>\n                    </section>\n                    <section className=\"list-items\">\n                        <TodoList items={this.state.items} />\n                    </section>\n                    <section className=\"react-version\">\n                        <p className=\"font-weight-bold\">React Js version : {React.version}</p>\n                    </section>\n                </header>\n            </div>\n        );\n    }\n}\n\nclass TodoList extends Component {\n    render() {\n        return (\n            <ul>\n                {this.props.items.map(item => (\n                    <li key={item.id}>{item.text}</li>\n                ))}\n            </ul>\n        )\n    }\n}\n\nfunction TodoNav() {\n    const [isOpen, setIsOpen] = useState(false);\n    const toggle = () => setIsOpen(!isOpen);\n    return (\n        <Navbar color=\"info\" dark fixed=\"top\" expand=\"md\">\n            <NavbarBrand href=\"/\">Adam Arthur Faizal</NavbarBrand>\n            <NavbarToggler onClick={toggle} />\n            <Collapse isOpen={isOpen} navbar>\n                <Nav className=\"mr-auto\" navbar>\n                    <NavItem>\n                        <NavLink href=\"https://github.com/AdamArthurFaizal\">GitHub</NavLink>\n                    </NavItem>\n                </Nav>\n                <NavbarText>React JS version : {React.version}</NavbarText>\n            </Collapse>\n        </Navbar>\n    )\n}\n\nclass AppRouter extends Component {\n    render() {\n        return (\n            <div>\n                <Switch>\n                    <Route path=\"/\" component={TodoApp} exact/>\n                </Switch>\n            </div>\n        )\n    }\n}\n\nexport default AppRouter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport AppRouter from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <AppRouter />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}